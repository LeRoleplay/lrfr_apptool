import os
import sys
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import requests
import zipfile
import time
from threading import Thread
from io import BytesIO
from ttkbootstrap import Style
from PIL import Image, ImageTk

# üìå Liens des fichiers
CSS_PACK_URL = "https://downloads-eu.gmodcontent.com/file/gmodcontent-eu/css-content-gmodcontent.zip"
LOGO_URL = "https://le-roleplay.fr/img/logo.png"

# üìå Recherche automatique du dossier addons de Garry's Mod
def find_gmod_path():
    possible_paths = [
        "C:\\Program Files (x86)\\Steam\\steamapps\\common\\GarrysMod\\garrysmod\\addons",
        "C:\\Program Files\\Steam\\steamapps\\common\\GarrysMod\\garrysmod\\addons",
        os.path.expanduser("~") + "\\Steam\\steamapps\\common\\GarrysMod\\garrysmod\\addons",
        "D:\\Steam\\steamapps\\common\\GarrysMod\\garrysmod\\addons",
        "E:\\Steam\\steamapps\\common\\GarrysMod\\garrysmod\\addons"
    ]
    for path in possible_paths:
        if os.path.exists(path):
            return path
    return ""

# üìå Fonction pour charger une image depuis un lien Web
def load_web_image(url):
    try:
        response = requests.get(url)
        response.raise_for_status()  # V√©rifie si l'image est accessible
        image_data = BytesIO(response.content)  # Convertir en image exploitable
        return Image.open(image_data).resize((120, 120), Image.LANCZOS)
    except Exception as e:
        print(f"‚ö† Erreur lors du chargement du logo : {e}")
        return None

# üìå Cr√©ation de la fen√™tre principale
root = tk.Tk()
root.title("Le Roleplay - CS:S Installer")
root.geometry("600x450")  # Fen√™tre plus large
root.resizable(False, False)
style = Style("darkly")  # Th√®me sombre
root.configure(bg="#212121")

# üìå Charger le logo depuis le Web
logo_image = load_web_image(LOGO_URL)
if logo_image:
    logo = ImageTk.PhotoImage(logo_image)
    logo_label = tk.Label(root, image=logo, bg="#212121")
    logo_label.pack(pady=10)
else:
    tk.Label(root, text="‚ö† Logo non charg√©", fg="red", bg="#212121").pack(pady=10)

# üìå Titre principal
title_label = tk.Label(root, text="Le Roleplay - CS:S Installer", font=("Arial", 16, "bold"), fg="white", bg="#212121")
title_label.pack(pady=5)

# üìå Variable pour stocker le chemin
install_path = tk.StringVar()
install_path.set(find_gmod_path())

# ‚úÖ S√©lection manuelle du dossier (si d√©tect√© incorrectement)
def select_folder():
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        install_path.set(folder_selected)

def download_and_install():
    if not install_path.get():
        messagebox.showerror("Erreur", "Impossible de trouver le dossier GMod. S√©lectionnez-le manuellement.")
        return

    download_button.config(state=tk.DISABLED)
    progress_label.config(text="T√©l√©chargement en cours...")
    speed_label.config(text="")
    time_label.config(text="")
    eta_label.config(text="")

    def download():
        try:
            file_path = os.path.join(install_path.get(), "css_pack.zip")

            # üì• T√©l√©chargement du fichier
            response = requests.get(CSS_PACK_URL, stream=True)
            if response.status_code != 200:
                messagebox.showerror("Erreur", "Le fichier n'a pas pu √™tre t√©l√©charg√©.")
                download_button.config(state=tk.NORMAL)
                return

            total_size = int(response.headers.get('content-length', 0))
            downloaded_size = 0
            start_time = time.time()

            # ‚è≥ Texte par d√©faut pendant le d√©but du t√©l√©chargement
            speed_label.config(text="‚ö° Vitesse : calcul...")
            time_label.config(text="‚è≥ Temps √©coul√© : 0.00 sec")
            eta_label.config(text="üìÖ Temps restant : estimation...")

            with open(file_path, "wb") as file:
                for data in response.iter_content(1024):
                    file.write(data)
                    downloaded_size += len(data)

                    if total_size > 0:
                        progress_bar["value"] = (downloaded_size / total_size) * 100

                    elapsed_time = time.time() - start_time
                    speed = (downloaded_size / elapsed_time) / (1024 * 1024) if elapsed_time > 0 else 0
                    remaining_time = ((total_size - downloaded_size) / (speed * 1024 * 1024)) if speed > 0 else 0
                    eta = time.strftime("%M min %S sec", time.gmtime(remaining_time)) if remaining_time > 0 else "calcul..."

                    speed_label.config(text=f"‚ö° Vitesse : {speed:.2f} MB/s")
                    time_label.config(text=f"‚è≥ Temps √©coul√© : {elapsed_time:.2f} sec")
                    eta_label.config(text=f"üìÖ Temps restant : {eta}")

                    root.update_idletasks()

            progress_label.config(text="Extraction en cours...")

            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(install_path.get())

            os.remove(file_path)

            progress_label.config(text="‚úÖ Installation termin√©e !")
            messagebox.showinfo("Succ√®s", "Le pack CS:S a √©t√© install√© avec succ√®s dans addons !")

        except Exception as e:
            messagebox.showerror("Erreur", f"Une erreur est survenue : {e}")
        finally:
            download_button.config(state=tk.NORMAL)

    # Lancer le t√©l√©chargement dans un thread
    Thread(target=download).start()

# üìå Interface graphique stylis√©e
frame = tk.Frame(root, bg="#212121")
frame.pack(pady=5)

tk.Label(frame, text="Dossier d'installation de Garry's Mod :", fg="white", bg="#212121").pack(pady=5)
entry = tk.Entry(frame, textvariable=install_path, width=50, font=("Arial", 10), bg="#333", fg="white", bd=2)
entry.pack(pady=5)
browse_button = tk.Button(frame, text="üìÇ Parcourir", command=select_folder, font=("Arial", 10, "bold"), bg="#fbbf15", fg="black", relief="flat")
browse_button.pack(pady=5)

download_button = tk.Button(root, text="‚ö° Installer le pack CS:S", command=download_and_install, font=("Arial", 12, "bold"), bg="#fbbf15", fg="black", relief="flat")
download_button.pack(pady=10)

progress_label = tk.Label(root, text="", fg="white", bg="#212121")
progress_label.pack()

# ‚úÖ Barre de progression horizontale
progress_bar = ttk.Progressbar(root, length=500, mode="determinate", style="info.Horizontal.TProgressbar")
progress_bar.pack(pady=10)

# ‚úÖ Ajout des infos sur la vitesse et le temps restant
speed_label = tk.Label(root, text="", fg="white", bg="#212121", font=("Arial", 10))
speed_label.pack()
time_label = tk.Label(root, text="", fg="white", bg="#212121", font=("Arial", 10))
time_label.pack()
eta_label = tk.Label(root, text="", fg="white", bg="#212121", font=("Arial", 10, "bold"))
eta_label.pack()

# üìå Lancer l'application
root.mainloop()
